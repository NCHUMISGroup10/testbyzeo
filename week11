import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, ConfusionMatrixDisplay

import matplotlib.pyplot as plt

# Load datasets with absolute paths
train_df = pd.read_csv('/Users/elaine/Desktop/train.csv')
test_df = pd.read_csv('/Users/elaine/Desktop/test.csv')
gender_submission_df = pd.read_csv('/Users/elaine/Desktop/gender_submission.csv')

# Print first 10 rows of the training data
print(train_df.head(10))

# Data preprocessing
# Fill missing values
train_df['Age'].fillna(train_df['Age'].median(), inplace=True)
train_df['Embarked'].fillna(train_df['Embarked'].mode()[0], inplace=True)
train_df['Fare'].fillna(train_df['Fare'].median(), inplace=True)

test_df['Age'].fillna(test_df['Age'].median(), inplace=True)
test_df['Embarked'].fillna(test_df['Embarked'].mode()[0], inplace=True)
test_df['Fare'].fillna(test_df['Fare'].median(), inplace=True)

# Label encoding
label_encoder_sex = LabelEncoder()
label_encoder_embarked = LabelEncoder()

# Fit and transform train data
train_df['Sex'] = label_encoder_sex.fit_transform(train_df['Sex'])
train_df['Embarked'] = label_encoder_embarked.fit_transform(train_df['Embarked'])

# Transform test data
test_df['Sex'] = test_df['Sex'].apply(lambda x: x if x in label_encoder_sex.classes_ else 'unknown')
test_df['Embarked'] = test_df['Embarked'].apply(lambda x: x if x in label_encoder_embarked.classes_ else 'unknown')

# Handle unseen labels in test data
if 'unknown' in test_df['Sex'].unique():
    label_encoder_sex.classes_ = np.append(label_encoder_sex.classes_, 'unknown')
if 'unknown' in test_df['Embarked'].unique():
    label_encoder_embarked.classes_ = np.append(label_encoder_embarked.classes_, 'unknown')

test_df['Sex'] = label_encoder_sex.transform(test_df['Sex'])
test_df['Embarked'] = label_encoder_embarked.transform(test_df['Embarked'])

# Feature selection
features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']
X = train_df[features]
y = train_df['Survived']

# Standardize features
scaler = StandardScaler()
X = scaler.fit_transform(X)
X_test = scaler.transform(test_df[features])

# Split data into training and validation sets
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Logistic Regression model
log_reg = LogisticRegression(random_state=42)
log_reg.fit(X_train, y_train)
y_pred_log_reg = log_reg.predict(X_val)

# Train Decision Tree model
dec_tree = DecisionTreeClassifier(random_state=42)
dec_tree.fit(X_train, y_train)
y_pred_dec_tree = dec_tree.predict(X_val)

# Evaluate models
def evaluate_model(y_true, y_pred, model_name):
    accuracy = accuracy_score(y_true, y_pred)
    precision = precision_score(y_true, y_pred)
    recall = recall_score(y_true, y_pred)
    f1 = f1_score(y_true, y_pred)
    print(f"--- {model_name} Performance ---")
    print(f"Accuracy: {accuracy:.4f}")
    print(f"Precision: {precision:.4f}")
    print(f"Recall: {recall:.4f}")
    print(f"F1 Score: {f1:.4f}")
    return accuracy, precision, recall, f1

log_reg_metrics = evaluate_model(y_val, y_pred_log_reg, "Logistic Regression")
dec_tree_metrics = evaluate_model(y_val, y_pred_dec_tree, "Decision Tree")

# Predict on test set
y_test_pred_log_reg = log_reg.predict(X_test)
y_test_pred_dec_tree = dec_tree.predict(X_test)

# Output test accuracy and confusion matrix
y_test_true = gender_submission_df['Survived']

test_accuracy_log_reg = accuracy_score(y_test_true, y_test_pred_log_reg)
test_accuracy_dec_tree = accuracy_score(y_test_true, y_test_pred_dec_tree)

print(f"Test Accuracy (Logistic Regression): {test_accuracy_log_reg}")
print(f"Test Accuracy (Decision Tree): {test_accuracy_dec_tree}")

# Confusion matrices
def plot_confusion_matrix(y_true, y_pred, title):
    cm = confusion_matrix(y_true, y_pred)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm)
    disp.plot()
    plt.title(title)
    plt.show()

plot_confusion_matrix(y_test_true, y_test_pred_log_reg, "Confusion Matrix - Logistic Regression")
plot_confusion_matrix(y_test_true, y_test_pred_dec_tree, "Confusion Matrix - Decision Tree")
